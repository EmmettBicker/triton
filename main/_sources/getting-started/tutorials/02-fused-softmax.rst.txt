
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-60

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 61-69

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 71-80

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 80-110

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 111-112

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 112-186

.. code-block:: Python


    device = torch.cuda.current_device()
    properties = driver.active.utils.get_device_properties(device)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software piepling stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel, num_programs = kernels.get(BLOCK_SIZE, (None, 0))
        if kernel is None:
            kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                           num_stages=num_stages, num_warps=num_warps, grid=(1, ))
            kernel._init_handles()
            n_regs = kernel.n_regs
            size_smem = kernel.metadata.shared
            if is_hip():
                # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
                # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
                # ISA SECTION (3.6.4 for CDNA3)
                # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
                # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
                # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
                # not required to be equal numbers of both types.
                if is_cdna():
                    NUM_GPRS = NUM_REGS * 2

                # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
                # When we divide this number with WARP_SIZE we get maximum number of waves that can
                # execute on a CU (multi-processor)  in parallel.
                MAX_NUM_THREADS = properties["max_threads_per_sm"]
                max_num_waves = MAX_NUM_THREADS // WARP_SIZE
                occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
            else:
                occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
            occupancy = min(occupancy, SIZE_SMEM // size_smem)
            num_programs = NUM_SM * occupancy
            kernels[BLOCK_SIZE] = (kernel, num_programs)

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](
            y,
            x,
            x.stride(0),
            y.stride(0),
            n_rows,
            n_cols,
        )
        return y









.. GENERATED FROM PYTHON SOURCE LINES 187-189

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 191-193

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 193-200

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device='cuda')
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 201-202

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 204-209

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 209-240

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch'],  # possible values for `line_arg``
            line_names=[
                "Triton",
                "Torch",
            ],  # label name for the lines
            styles=[('blue', '-'), ('green', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device='cuda', dtype=torch.float32)
        stream = torch.cuda.Stream()
        torch.cuda.set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch
    0     256.0   479.045443   688.093259
    1     384.0   614.868977   805.748883
    2     512.0   749.842784   932.962745
    3     640.0   786.595052   948.311348
    4     768.0   879.571794  1026.503021
    5     896.0   937.069549  1072.532746
    6    1024.0   987.729079  1107.200331
    7    1152.0  1101.644989   616.048696
    8    1280.0  1149.420146   668.486688
    9    1408.0  1165.316636   724.148674
    10   1536.0  1182.981733   782.311092
    11   1664.0  1209.602542   816.028610
    12   1792.0  1237.277993   854.427808
    13   1920.0  1255.632716   906.495000
    14   2048.0  1278.801303   957.652053
    15   2176.0  1265.373464   975.638494
    16   2304.0  1266.435399  1013.374063
    17   2432.0  1293.298002  1054.044578
    18   2560.0  1309.759034  1086.088465
    19   2688.0  1310.360183  1098.990548
    20   2816.0  1327.264800  1125.711197
    21   2944.0  1328.103286  1164.945119
    22   3072.0  1347.202908  1184.959264
    23   3200.0  1352.005525  1189.461594
    24   3328.0  1353.915905  1221.076835
    25   3456.0  1370.638967  1246.726958
    26   3584.0  1373.188139  1257.850389
    27   3712.0  1381.209302  1264.719829
    28   3840.0  1388.805741  1296.877764
    29   3968.0  1383.859978  1315.480408
    30   4096.0  1396.300800  1323.412721
    31   4224.0  1333.378728  1156.710323
    32   4352.0  1338.490456  1172.152995
    33   4480.0  1350.830934  1184.540197
    34   4608.0  1365.169622  1195.222126
    35   4736.0  1355.537746  1200.262459
    36   4864.0  1379.272568  1218.096336
    37   4992.0  1369.530284  1232.624866
    38   5120.0  1372.044481  1249.347981
    39   5248.0  1374.441914  1259.241272
    40   5376.0  1380.464696  1284.446754
    41   5504.0  1383.547461  1296.529871
    42   5632.0  1384.455382  1317.246764
    43   5760.0  1393.739312  1327.307006
    44   5888.0  1391.257468  1343.626802
    45   6016.0  1397.613741  1351.858513
    46   6144.0  1409.788412  1371.284949
    47   6272.0  1419.823256  1372.412944
    48   6400.0  1414.669770  1388.387984
    49   6528.0  1413.251655  1391.498297
    50   6656.0  1418.837316  1402.145823
    51   6784.0  1411.101389  1412.480066
    52   6912.0  1430.403990  1422.162876
    53   7040.0  1419.708146  1432.187798
    54   7168.0  1427.074371  1435.075950
    55   7296.0  1434.712192  1442.294478
    56   7424.0  1427.542365  1443.873006
    57   7552.0  1428.268638  1452.159863
    58   7680.0  1434.775265  1459.857995
    59   7808.0  1435.733323  1463.441486
    60   7936.0  1438.172418  1466.517648
    61   8064.0  1440.338517  1470.965785
    62   8192.0  1439.446310  1486.704384
    63   8320.0  1388.348212  1401.523738
    64   8448.0  1383.562000  1402.345457
    65   8576.0  1395.038578  1393.307675
    66   8704.0  1389.293434  1398.663370
    67   8832.0  1380.850055  1404.425894
    68   8960.0  1394.683858  1411.827788
    69   9088.0  1408.209694  1418.233056
    70   9216.0  1405.238336  1425.021098
    71   9344.0  1399.454165  1424.701893
    72   9472.0  1399.425391  1433.356997
    73   9600.0  1395.124574  1433.913857
    74   9728.0  1402.040672  1443.429570
    75   9856.0  1416.479351  1443.618232
    76   9984.0  1397.983570  1451.638697
    77  10112.0  1415.735248  1457.560347
    78  10240.0  1420.011119  1465.818057
    79  10368.0  1415.174504  1461.121049
    80  10496.0  1417.085723  1466.269661
    81  10624.0  1409.634290  1468.607408
    82  10752.0  1403.288974  1472.110688
    83  10880.0  1399.445625  1479.433293
    84  11008.0  1420.818636  1478.096923
    85  11136.0  1427.528801  1485.124479
    86  11264.0  1427.914130  1486.908790
    87  11392.0  1412.228347  1493.255266
    88  11520.0  1419.635168  1492.640126
    89  11648.0  1424.964425  1494.521064
    90  11776.0  1435.458697  1501.864179
    91  11904.0  1444.596545  1506.105786
    92  12032.0  1422.047693  1505.919706
    93  12160.0  1418.634963  1508.733166
    94  12288.0  1432.316436  1390.734027
    95  12416.0  1451.019454  1391.603000
    96  12544.0  1439.409230  1391.970879
    97  12672.0  1448.182471  1392.090155




.. GENERATED FROM PYTHON SOURCE LINES 241-245

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.387 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
